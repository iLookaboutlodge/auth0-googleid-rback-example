{"ast":null,"code":"import rules from \"../rbac-rules\";\n\nvar check = function check(rules, role, action, data) {\n  var permissions = rules[role];\n\n  if (!permissions) {\n    // role is not present in the rules\n    return false;\n  }\n\n  var staticPermissions = permissions.static;\n\n  if (staticPermissions && staticPermissions.includes(action)) {\n    // static rule not provided for action\n    return true;\n  }\n\n  var dynamicPermissions = permissions.dynamic;\n\n  if (dynamicPermissions) {\n    var permissionCondition = dynamicPermissions[action];\n\n    if (!permissionCondition) {\n      // dynamic rule not provided for action\n      return false;\n    }\n\n    return permissionCondition(data);\n  }\n\n  return false;\n};\n\nvar Can = function Can(props) {\n  return check(rules, props.role, props.perform, props.data) ? props.yes() : props.no();\n};\n\nCan.defaultProps = {\n  yes: function yes() {\n    return null;\n  },\n  no: function no() {\n    return null;\n  }\n};\nexport default Can;","map":{"version":3,"sources":["/Users/bernardlin/Git/auth0-googleid-rback-example/src/components/Can.js"],"names":["rules","check","role","action","data","permissions","staticPermissions","static","includes","dynamicPermissions","dynamic","permissionCondition","Can","props","perform","yes","no","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,eAAlB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACD,KAAD,EAAQE,IAAR,EAAcC,MAAd,EAAsBC,IAAtB,EAA+B;AAC3C,MAAMC,WAAW,GAAGL,KAAK,CAACE,IAAD,CAAzB;;AACA,MAAI,CAACG,WAAL,EAAkB;AAChB;AACA,WAAO,KAAP;AACD;;AAED,MAAMC,iBAAiB,GAAGD,WAAW,CAACE,MAAtC;;AAEA,MAAID,iBAAiB,IAAIA,iBAAiB,CAACE,QAAlB,CAA2BL,MAA3B,CAAzB,EAA6D;AAC3D;AACA,WAAO,IAAP;AACD;;AAED,MAAMM,kBAAkB,GAAGJ,WAAW,CAACK,OAAvC;;AAEA,MAAID,kBAAJ,EAAwB;AACtB,QAAME,mBAAmB,GAAGF,kBAAkB,CAACN,MAAD,CAA9C;;AACA,QAAI,CAACQ,mBAAL,EAA0B;AACxB;AACA,aAAO,KAAP;AACD;;AAED,WAAOA,mBAAmB,CAACP,IAAD,CAA1B;AACD;;AACD,SAAO,KAAP;AACD,CA1BD;;AA4BA,IAAMQ,GAAG,GAAG,SAANA,GAAM,CAAAC,KAAK;AAAA,SACfZ,KAAK,CAACD,KAAD,EAAQa,KAAK,CAACX,IAAd,EAAoBW,KAAK,CAACC,OAA1B,EAAmCD,KAAK,CAACT,IAAzC,CAAL,GACIS,KAAK,CAACE,GAAN,EADJ,GAEIF,KAAK,CAACG,EAAN,EAHW;AAAA,CAAjB;;AAKAJ,GAAG,CAACK,YAAJ,GAAmB;AACjBF,EAAAA,GAAG,EAAE;AAAA,WAAM,IAAN;AAAA,GADY;AAEjBC,EAAAA,EAAE,EAAE;AAAA,WAAM,IAAN;AAAA;AAFa,CAAnB;AAKA,eAAeJ,GAAf","sourcesContent":["import rules from \"../rbac-rules\";\n\nconst check = (rules, role, action, data) => {\n  const permissions = rules[role];\n  if (!permissions) {\n    // role is not present in the rules\n    return false;\n  }\n\n  const staticPermissions = permissions.static;\n\n  if (staticPermissions && staticPermissions.includes(action)) {\n    // static rule not provided for action\n    return true;\n  }\n\n  const dynamicPermissions = permissions.dynamic;\n\n  if (dynamicPermissions) {\n    const permissionCondition = dynamicPermissions[action];\n    if (!permissionCondition) {\n      // dynamic rule not provided for action\n      return false;\n    }\n\n    return permissionCondition(data);\n  }\n  return false;\n};\n\nconst Can = props =>\n  check(rules, props.role, props.perform, props.data)\n    ? props.yes()\n    : props.no();\n\nCan.defaultProps = {\n  yes: () => null,\n  no: () => null\n};\n\nexport default Can;\n"]},"metadata":{},"sourceType":"module"}